#!/usr/bin/env ruby

require 'yaml'
Bundler.require :default

class Object
   def try method, *args
      if self.respond_to? method
         self.send(method, *args)
      else
         nil ; end ; end ; end

settings = YAML.load( IO.read( 'hip.yml' ) )
font_settings = YAML.load( IO.read( 'irmucsv.yml' ) )

hips = Hash[ (settings[ 'знаци' ] || {}).to_a.map do |c|
   hip = c[ 1 ][ 'hip' ]
   if !hip || font_settings[ 'пропускъ' ].include?( hip )
      next ; end
   c[ 1 ][ 'пути' ] = (hip.size - 1).times.to_a.map { |i| hip[0..i] }
   c[ 1 ] && [ hip, c ]
   end.select{ |c| c && c[ 0 ] } ]

hips.merge! Hash[ (settings[ 'сдвоицы' ] || []).map do |c|
   hip = c[ 'hip' ]
   if !hip || font_settings[ 'пропускъ' ].include?( hip )
      next ; end
   c[ 'пути' ] = (hip.size - 1).times.to_a.map { |i| hip[0..i] }
   c && [ hip, [ nil, c ] ]
   end.select{ |c| c && c[ 0 ] } ]

# ЧИНИ find dupes in hips

letters = hips.to_a.map {|c| c[ 0 ] }.join('').split(//).uniq.sort

ligatures = hips.to_a.map do |(hip, (_, d))|
   ( d[ 'пути' ].dup << hip ).select { |x| x.size > 1 }
   end.flatten.uniq.sort

puts "Singletons: #{letters.size}"
puts "Ligatures: #{ligatures.size}"

# Generate tex with chars
texheader = <<TEX
\\documentclass[12pt,a6paper,twoside,dvips,civil=antiqua,cs=irmologion]{hipbook}
\\usepackage[utf8]{inputenc}
\\usepackage[T2A]{fontenc}
\\begin{document}

---

TEX

texfooter = <<TEX

\\end{document}
TEX

#File.open('hips.tex', 'w') do |f|
#   f.puts texheader + hips.keys.join(' ') + texfooter ; end

# append .vpl LIG rules
#
# open .vpl

srcvpl = IO.read 'irmucsv.vpl.in'

# grep KRN from LIGTABLE section
#

mode = nil
labels = {}
label = nil
char = nil
ucs8chars = {}
i = nil
head = ''
srcvpl.each_line do |l|
   if l =~ /LIGTABLE/
      mode = :ligtable
   elsif l =~ /CHARACTER (.) ([^)]+)/
      ucs8chars[ i ] = char if mode == :character
      mode = :character
      char = {}
      i = ($1 == 'C') && $2.ord || $2.to_i(8)
   elsif mode == :ligtable
      if l =~ /LABEL (.) ([^)]+)/
         i = ($1 == 'C') && $2.ord || $2.to_i(8)
         label = ''
      elsif l =~ /STOP/
         label << l
         labels[ i ] = label
      elsif l =~ /KRN/
         label << l ; end 
   elsif mode == :character
      if l =~ /(CHARWD|CHARHT|CHARDP|CHARIC) R ([\d\-\.]+)\)/
         char[ $1 ] = $2 ; end
   else
      head << l ; end ; end

if mode == :character
   ucs8chars[ i ] = char ; end

# Update map 256 of UCS8 table
#
#
texmap = {}
hips.each do |hip, (_, d)|
   code = d[ 'tex' ]
   if !code && hip.size == 1
      code = hip.ord ; end
   if code
      if texmap[ code ]
         $stderr.puts "The place for hip #{hip} is already busy"
         next ; end
      texmap[ code ] = hip ; end ; end

# and non-exist char with path to ligatures
hips.each do |hip, (_, d)|
   ( d[ 'пути' ].dup << hip ).each do |path|
      def validate_ucs8_char texmap, char
         if texmap.key( char )
            return ; end
         # NOTE first idx 14, idx below that are hide by tex?
         free_idx = ( (14..255).to_a - texmap.keys ).first
         if !free_idx
            $stderr.puts "There are no free placeholders. Exiting..." ; exit(1) ; end

         texmap[ free_idx ]= char ; end

      validate_ucs8_char texmap, path[-1]
      validate_ucs8_char texmap, path ; end ; end

# Update ligature table
ligs = {}
hips.each do |hip, (_, d)|
   ( d[ 'пути' ].dup << hip )[1..-1].each do |path|
      char = texmap.key( path[-1] )
      base = texmap.key( path[0..-2] )
      to = texmap.key( path )
      if !char
         $stderr.puts "Char '#{path[-1]}' has no placeholder for ligature '#{path}'" ; end
      if !to
         $stderr.puts "Ligature '#{path}' has no placeholder" ; end
      lig = [ char, to ]
      ligs[ base ] ||= []
      if !ligs[ base ].include?( lig )
         ligs[ base ] << lig ; end ; end ; end

#
def charname char
   char && "#{char[ 0 ]}[#{char[ 1 ][ 'hip' ].gsub(/[\(\)<>]/,'_')}]" || "" ; end

File.open( 'irmucsv.vpl', 'w' ) do |f|
   f.puts head
   f.puts '(LIGTABLE'
   ligs.keys.sort.each do |lig|
      links = ligs[ lig ]
      hip = hips[ texmap[ lig ] ]
      f.puts "   (LABEL O #{lig.to_s(8)}) (comment #{hip && hip[ 0 ]})"
      links.each do |link|
         hipc = link.map {|x| hips[ texmap[ x ] ] }
         f.puts "   (LIG O #{link[0].to_s(8)} O #{link[1].to_s(8)})" \
                " (comment + #{charname(hipc[0])} -> #{charname(hipc[1])})" ; end
      f.puts "   (STOP)" ; end
   f.puts '   )'
   texmap.keys.sort.each do |code|
      f.puts "(CHARACTER O #{code.to_s(8)}"
#      p code
#      p chars[ code ]
      ucs8code = hips[ texmap[ code ] ].try(:[], 1).try(:[], 'ucs8' )
      if ucs8code && !ucs8chars[ ucs8code ].empty?
         f.puts ucs8chars[ ucs8code ].to_a.map {|(k,v)| "   (#{k} R #{v})" }.join("\n")
      else
         # NOTE setting WD to 0 makes the char overdrawn by the following one,
         # so its WD should be derived from the previous for an intermediate
         # ligature
         f.puts '   (CHARWD R 0)' ; end

#      if texmap[ code ].size == 1
      char = hips[ texmap[ code ] ]
#         p "CODE #{texmap[ code ]}, ORD: #{texmap[ code ].ord}"
#         ord = char && char[ 1 ][ 'tex' ] || texmap[ code ].ord
#         ord = char && char[ 1 ][ 'tex' ] || code
#         if ord > 0xFF
#            $stderr.puts "Char #{texmap[ code ]} has no defined tex value" ; end
      if char
         f.puts "   (MAP\n" \
                "      (SETCHAR O #{code.to_s(8)})\n" \
                "      )\n" ; end
         comment = charname(hips[ texmap[ code ] ])
         if comment
            f.puts "   (comment #{comment})" ; end
#      p '-'*80
      f.puts '   )' ; end ; end

enc_name = 'ucs8'
File.open( "#{enc_name}.enc", 'w' ) do |f|
   f.puts "/#{enc_name.upcase}Encoding ["
   (0...32).each do |l|
      (0...8).each do |n|
         idx = l * 8 + n
         adobe_name = hips[ texmap[ idx ] ].try(:[], 1 ).try(:[], 'adobe_name') || '.notdef'
         f.print " /#{adobe_name}" ; end
      f.puts "" ; end
   f.puts "] def" ; end

File.open( "hiptex.map", 'w' ) do |f|
   f.puts "irmucsv Irmologion-Ucs \"#{enc_name.upcase}Encoding\"" ; end
