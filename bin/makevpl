#!/usr/bin/env ruby

require 'yaml'
Bundler.require :default

settings = YAML.load( IO.read( 'irmucsv.yml' ) )

hips = settings[ 'chars' ].to_a.map do |c|
   hip = c[ 1 ][ 'hip' ]
   c[ 1 ][ 'paths' ] = (hip.size - 1).times.to_a.map { |i| hip[0..i] }
   c[ 1 ] && !c[ 1 ][ 'skip' ] && [ hip, c ]
   end.select{ |c| c[ 0 ] }.to_h

# ЧИНИ find dupes in hips

letters = hips.to_a.map {|c| c[ 0 ] }.join('').split(//).uniq.sort

ligatures = hips.to_a.map do |(hip, (_, d))|
   ( d[ 'paths' ].dup << hip ).select { |x| x.size > 1 }
   end.flatten.uniq.sort

puts "Singletons: #{letters.size}"
puts "Ligatures: #{ligatures.size}"

# Generate tex with chars
texheader = <<TEX
\\documentclass[12pt,a6paper,twoside,dvips,civil=antiqua,cs=irmologion]{hipbook}
\\usepackage[utf8]{inputenc}
\\usepackage[T2A]{fontenc}
\\begin{document}

---

TEX

texfooter = <<TEX

\\end{document}
TEX

File.open('hips.tex', 'w') do |f|
   f.puts texheader + hips.keys.join(' ') + texfooter ; end

# append .vpl LIG rules
#
# open .vpl

srcvpl = IO.read 'texmf/fonts/vpl/hiptex/irmucsv.vpl'

# grep KRN from LIGTABLE section
#

mode = nil
labels = {}
label = nil
char = nil
chars = {}
i = nil
head = ''
srcvpl.each_line do |l|
   if l =~ /LIGTABLE/
      mode = :ligtable
   elsif l =~ /CHARACTER (.) ([^)]+)/
      chars[ i ] = char if mode == :character
      mode = :character
      char = ''
      i = ($1 == 'C') && $2.ord || $2.to_i(8)
   elsif mode == :ligtable
      if l =~ /LABEL (.) ([^)]+)/
         i = ($1 == 'C') && $2.ord || $2.to_i(8)
         label = ''
      elsif l =~ /STOP/
         label << l
         labels[ i ] = label
      elsif l =~ /KRN/
         label << l ; end 
   elsif mode == :character
      char << l
   else
      head << l ; end ; end

if mode == :character
   chars[ i ] = char ; end

# Update map 256 of UCS8 table
#
#
ucs8map = {}
hips.each { |hip, (_, d)| ucs8map[ d[ 'ucs8' ] ]= hip }
# and non-exist char with pathed to ligatures
hips.each do |hip, (_, d)|
   d[ 'paths' ].each do |path|
      if !ucs8map.key( path )
         free_idx = ( (0..255).to_a - ucs8map.keys ).first
         ucs8map[ free_idx ]= path ; end ; end ; end


# Update ligature table
ligs = {}
hips.each do |hip, (_, d)|
   ( d[ 'paths' ].dup << hip )[1..-1].each do |path|
      char = ucs8map.key( path[-1] )
      base = ucs8map.key( path[0..-2] )
      lig = [ char, ucs8map.key( path ) ]
      ligs[ base ] ||= []
      if !ligs[ base ].include?( lig )
         ligs[ base ] << lig ; end ; end ; end
#
#
File.open( 'irmucsvn.vpl', 'w' ) do |f|
   f.puts head
   f.puts '(LIGTABLE'
   ligs.each do |lig, links|
      f.puts "   (LABEL O #{lig.to_s(8)})"
      links.each do |link|
         f.puts "   (LIG O #{link[0].to_s(8)} O #{link[1].to_s(8)})" ; end
      f.puts "   (STOP)" ; end
   f.puts '   )'
   ucs8map.keys.sort.each do |code|
      f.puts "(CHARACTER O #{code.to_s(8)}"
      if chars[ code ]
         f.puts chars[ code ]
      else
         f.puts '   (CHARWD R 0)'
         f.puts '   )' ; end ; end ; end

# binding.pry

